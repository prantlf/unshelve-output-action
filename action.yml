name: 'Unshelve Build Output'
description: 'GitHub action for unshelving a build output from the cache shelved there by shelve-output-action before creating a release.'
author: prantlf

branding:
  icon: download
  color: blue

inputs:
  name:
    description: >-
      The name of the archive without the platform and architecture and without the `.zip` extension. The project name from `v.mod` will be used by default. The name of the archive will be `{name}-{os}-{arch}.zip`, for example: `newchanges-linux-x64.zip`.
  branches:
    description: >-
      Branches which this action should run for, which are used to publishing releases. Use spaces for separating the branch names. If you want to use multiple lines in YAML, introduce them with ">-". If you want to allow all branches, set the value to "*".
    default: main master
  enable:
    description: >-
      Can be set to `false` to prevent this action from downloading the archives. It's helpful in the pipeline, which will not continue releasing, but only building and testing, and that will be decided in the middle of a job execution.
    default: true
  include-linux:
    description: Include the archive for Linux.
    default: true
  include-macos:
    description: Include archives for macOS ARM64 and X64.
    default: true
  include-macos-arm64:
    description: Include the archive for macOS ARM64.
    default: true
  include-macos-x64:
    description: Include the archive for macOS X64.
    default: true
  include-windows:
    description: Include the archive for Windows.
    default: true
  discard-shelf:
    description: >-
      Can be set to `false` to prevent automatic discarding of the shelved files from the cache.
    default: true

runs:
  using: 'composite'
  steps:
  - name: Setup parameters
    if: ${{ inputs.enable == 'true' }}
    id: setup
    env:
      UO_NAME: ${{ inputs.name }}
      UO_BRANCHES: ${{ inputs.branches }}
    shell: bash
    run: |
      if [[ "$UO_NAME" == "" ]]; then
        UO_NAME=$(node -e "console.log(/^.*name: *['\"]([^'\"]+)['\"].*$/mg.exec(require('fs').readFileSync('v.mod', 'utf8'))[1])")
      fi
      echo "name=$UO_NAME" >> $GITHUB_OUTPUT
      if [[ "$UO_BRANCHES" == "*" || " $UO_BRANCHES " == *" $GITHUB_REF_NAME "* ]]; then
        echo "enable=true" >> $GITHUB_OUTPUT
      fi
  - name: Check platform and architecture
    if: ${{ steps.setup.outputs.enable == 'true' && (runner.os != 'Linux' && runner.os != 'macOS' && runner.os != 'Windows' || runner.arch != 'X64') }}
    env:
      UO_PLAT: ${{ runner.os }}
      UO_ARCH: ${{ runner.arch }}
    shell: bash
    run: |
      echo "::error title=â›” Unsupported platform or architecture: $UO_PLAT-$UO_ARCH error hint::Supported are Linux, macOS, Windows on X64"
      exit 1
  - name: Extract Linux archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-linux == 'true' }}
    uses: actions/cache/restore@v3
    with:
      path: ${{ steps.setup.outputs.name }}-linux-x64.zip
      key: ${{ steps.setup.outputs.name }}-linux-x64.zip-${{ github.sha }}
      fail-on-cache-miss: true
      enableCrossOsArchive: true
  - name: Extract macOS ARM64 archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-macos == 'true' && inputs.include-macos-arm64 == 'true' }}
    uses: actions/cache/restore@v3
    with:
      path: ${{ steps.setup.outputs.name }}-macos-arm64.zip
      key: ${{ steps.setup.outputs.name }}-macos-arm64.zip-${{ github.sha }}
      fail-on-cache-miss: true
      enableCrossOsArchive: true
  - name: Extract macOS X64 archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-macos == 'true' && inputs.include-macos-x64 == 'true' }}
    uses: actions/cache/restore@v3
    with:
      path: ${{ steps.setup.outputs.name }}-macos-x64.zip
      key: ${{ steps.setup.outputs.name }}-macos-x64.zip-${{ github.sha }}
      fail-on-cache-miss: true
      enableCrossOsArchive: true
  - name: Extract Windows archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-windows == 'true' }}
    uses: actions/cache/restore@v3
    with:
      path: ${{ steps.setup.outputs.name }}-windows-x64.zip
      key: ${{ steps.setup.outputs.name }}-windows-x64.zip-${{ github.sha }}
      fail-on-cache-miss: true
      enableCrossOsArchive: true
  - name: Delete Linux archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-linux == 'true' && inputs.discard-shelf == 'true' }}
    uses: prantlf/delete-cache-action@v2
    with:
      key: ${{ steps.setup.outputs.name }}-linux-x64.zip-${{ github.sha }}
  - name: Delete macOS archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-macos == 'true' && inputs.discard-shelf == 'true' }}
    uses: prantlf/delete-cache-action@v2
    with:
      key: ${{ steps.setup.outputs.name }}-macos-x64.zip-${{ github.sha }}
  - name: Delete Windows archive from cache
    if: ${{ steps.setup.outputs.enable == 'true' && inputs.include-windows == 'true' && inputs.discard-shelf == 'true' }}
    uses: prantlf/delete-cache-action@v2
    with:
      key: ${{ steps.setup.outputs.name }}-windows-x64.zip-${{ github.sha }}
